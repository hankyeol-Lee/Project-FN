using System.Collections;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Tilemaps;

public class SkillSystem : MonoBehaviour
{
    public GameObject player; // ï¿½ï¿½ï¿½â¿¡ï¿½ï¿½ ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ï¿½ï¿½ ï¿½ï¿½Å³ ï¿½ï¿½Ïµï¿?ï¿½ï¿½ï¿½Ã°ï¿½ï¿½ï¿½.
    public Tilemap tilemap;
    public GameObject skillRange; // ï¿½ï¿½Å¸ï¿?
    private PlayerSkill playerskill;
    public ActiveSkill[] skills;
    public GameObject skillTargetObject; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½Å³ï¿½ï¿½ Å¸ï¿½ï¿½
    public ActiveSkill thisSkill; // Å°ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½, ï¿½î¶² ï¿½ï¿½Å³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ checkï¿½Ï´ï¿½ ï¿½ï¿½Å³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Å°ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½.

    private Vector3Int? lastMouseCell = null; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ó¹ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½Ç¥ ï¿½ï¿½ï¿½ï¿½

    public static SkillSystem Instance;

    private void Awake()
    {
        if (Instance  == null)
        {
            Instance = this;
        }
        playerskill = player.GetComponent<PlayerSkill>(); // playerskill.csï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        if (playerskill != null) //nullcheck
        {
            skills = playerskill.playerSkills; // ï¿½è¿­ ï¿½ï¿½Ã¼ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        }
        
    }
    private void Update()
    {
        if (Input.GetKeyDown(KeyCode.Q))
        {
            ShowSkillRange(skills[0]);
            thisSkill = skills[0];
        }
        if (Input.GetKeyDown(KeyCode.W))
        {
            ShowSkillRange(skills[1]);
            thisSkill = skills[1];
        }

        if (skillRange.activeSelf == true)
        {
            // CheckMouseInCircle È£ï¿½ï¿½
            Vector3Int? checkMouseCell = CheckMouseInCircle();

            if (checkMouseCell.HasValue)
            {
                //Debug.Log($"{ checkMouseCell.Value} ½ºÅ³ »ç¿ë!!");
                // ï¿½ï¿½Å³ ï¿½ï¿½ï¿½ï¿½ Ç¥ï¿½ï¿½
                if (thisSkill.isTargetCell)
                {
                    thisSkill.ShowRange(checkMouseCell.Value);
                    //Debug.Log($"ï¿½ï¿½Å³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½Ä¡: {checkMouseCell.Value}");

                    // ï¿½ï¿½Å¬ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
                    if (Input.GetMouseButton(0))
                    {
                        //Debug.Log($"ï¿½ï¿½Å³ ï¿½ï¿½ï¿?ï¿½ï¿½Ä¡: {checkMouseCell.Value}");
                        //Debug.Log(UI_EnergyBar.Instance.GetPlayerEnergy());

                        if (thisSkill.playerCost <= UI_EnergyBar.Instance.GetPlayerEnergy()) // ï¿½ï¿½Å³ï¿½Ú½ï¿½Æ®ï¿½ï¿½ ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Å©ï¿½Ù¸ï¿½ 
                        {
                            UI_EnergyBar.Instance.DecreaseHealth(thisSkill.playerCost);
                            ShowSkillAnimation(thisSkill.skillName, player.transform.position, checkMouseCell.Value);
                            thisSkill.CastSkill(thisSkill, player, checkMouseCell.Value);
                            skillRange.SetActive(false);
                        }
                    }
                }
                else
                    // ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Å³
                    thisSkill.ShowRange(checkMouseCell.Value);
                    if (Input.GetMouseButton(0))
                    {
                        Debug.Log(skillTargetObject.gameObject.name);
                        //Debug.Log(UI_EnergyBar.Instance.GetPlayerEnergy());
                        if (thisSkill.playerCost <= UI_EnergyBar.Instance.GetPlayerEnergy()) // ï¿½ï¿½Å³ï¿½Ú½ï¿½Æ®ï¿½ï¿½ ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Å©ï¿½Ù¸ï¿½ 
                        {
                            UI_EnergyBar.Instance.DecreaseHealth(thisSkill.playerCost);
                            ShowSkillAnimation(thisSkill.skillName, player.transform.position, skillTargetObject.gameObject.transform.position);
                            thisSkill.CastSkill(thisSkill, player, skillTargetObject);
                            skillRange.SetActive(false);
                        }
                        //ï¿½Ú½ï¿½Æ® ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½Ø¾ï¿½ï¿½ï¿½
                        //skillRange.SetActive(false);
                    }
                }
            }
        }
    }

    private void ShowSkillRange(ActiveSkill skill)
    {
        float skillrange = skill.distance;
        //rangeï¿½ï¿½Å­ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Å¸ï¿½ï¿½ï¿?Ç¥ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½. -> skill ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ù½ï¿½ deactivate ï¿½Ø¾ï¿½ï¿½ï¿½.
        skillRange.GetComponent<CircleRangeSize>().UpdateCircleSize(skillrange);
    }


    private Vector3Int? CheckMouseInCircle()
    {
        // ï¿½ï¿½ï¿½ì½º ï¿½ï¿½Ä¡ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ray ï¿½ï¿½ï¿½ï¿½
        skillTargetObject = null;
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        RaycastHit2D[] hits = Physics2D.GetRayIntersectionAll(ray);

        bool hitCircle = false; // ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ skillRangeï¿½ï¿½ ï¿½ï¿½Ò´ï¿½ï¿½ï¿?
        bool hitCell = false;   // ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ Å¸ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ò´ï¿½ï¿½ï¿?
        Vector3Int? currentCell = null;

        // Rayï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ® È®ï¿½ï¿½
        foreach (var hit in hits)
        {
            if (hit.collider.CompareTag("Enemy"))
            {
                skillTargetObject = hit.collider.gameObject; // ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®
            }

            if (hit.collider.CompareTag("skillRange"))
            {
                hitCircle = true; // skillRange ï¿½ï¿½ï¿½ï¿½ ï¿½È¿ï¿½ ï¿½ï¿½ï¿½ï¿½
            }

            if (hit.collider.CompareTag("Cell"))
            {
                hitCell = true; // Å¸ï¿½Ï¸Ê¿ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿?
                Vector3 worldPosition = hit.point;
                currentCell = tilemap.WorldToCell(worldPosition); // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½Ç¥
            }
        }

        // ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ Circleï¿½ï¿½ Å¸ï¿½ï¿½(Cell) ï¿½ï¿½Î¿ï¿?ï¿½ï¿½ï¿?ï¿½Ö´ï¿½ ï¿½ï¿½ï¿?
        if (hitCircle && hitCell)
        {
            lastMouseCell = currentCell; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È¿ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®
            //Debug.Log($"ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ Circleï¿½ï¿½ Cellï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½. ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½: {currentCell}");
            return currentCell;
            
        }

        // ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ Circleï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?ï¿½Ö´ï¿½ ï¿½ï¿½ï¿?
        if (hitCircle && lastMouseCell.HasValue)
        {
            //Debug.Log($"ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ Circleï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½. ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È¿ ï¿½ï¿½ ï¿½ï¿½È¯: {lastMouseCell}");
            //Debug.Log($"{lastMouseCell} ¿´´ø°Í¤·¤·");
            return lastMouseCell; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È¿ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
        }

        // ï¿½ï¿½ï¿½ì½ºï¿½ï¿½ ï¿½ï¿½Å¸ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?
        return null;
    }
    public void ShowSkillAnimation(string skillName, Vector3 Start, Vector3 End)
    {
        GameObject skillPrefab = Resources.Load<GameObject>($"Prefab/SkillEffect/{skillName}");
        if (skillPrefab != null)
        {
            GameObject skillAnimationInstance = Instantiate(skillPrefab, Start, Quaternion.identity);

            // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Æ®: ï¿½Ú·ï¿½Æ¾ È£ï¿½ï¿½
            StartCoroutine(MoveSkillAnimation(skillAnimationInstance, Start, End, 0.3f)); 
        }
    }

    private IEnumerator MoveSkillAnimation(GameObject skillInstance, Vector3 start, Vector3 end, float duration)
    {
        float elapsedTime = 0f;

        // ï¿½Ìµï¿½ Ã³ï¿½ï¿½
        while (elapsedTime < duration)
        {
            if (skillInstance == null) yield break; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?ï¿½Ú·ï¿½Æ¾ ï¿½ï¿½ï¿½ï¿½
            elapsedTime += Time.deltaTime;
            float t = Mathf.Clamp01(elapsedTime / duration); // 0ï¿½ï¿½ï¿½ï¿½ 1ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
            skillInstance.transform.position = Vector3.Lerp(start, end, t); // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
            yield return null; // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ó±ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?
        }

        // ï¿½Ìµï¿½ ï¿½Ï·ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ® ï¿½ï¿½ï¿½ï¿½
        if (skillInstance != null)
            Destroy(skillInstance);
    }
    public void SetTilemap(Tilemap currentTilemap)
    {
        tilemap = currentTilemap;
    }

}

